#!/bin/bash

# Copyright 2021 Xilinx, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Package names relevant to GAv1, GAv1.5
OLD_PKGS=(
    xrm
    xvbm
    xilinx-u30-xvbm
    xrmu30decoder
    xrmu30scaler
    xrmu30encoder
    xmpsoccodecs
    xmultiscaler
    xlookahead
    xmaapps
    xmapropstojson
    xffmpeg
    launcher
    jobslotreservation
    xcdr)

# Package names relevant to GAv2
CURR_PKGS=(
    xrm
    xilinx-xvbm
    xilinx-u30-xrm-decoder
    xilinx-u30-xrm-encoder
    xilinx-u30-xrm-multiscaler
    xilinx-u30-xma-multiscaler
    xilinx-u30-xlookahead
    xilinx-u30-xmpsoccodecs
    xilinx-u30-xma-apps
    xilinx-u30-xmapropstojson
    xilinx-u30-xffmpeg
    xilinx-u30-launcher
    xilinx-u30-jobslotreservation
    xilinx-u30-xcdr
    xilinx-u30-gstreamer-1.16.2
    xilinx-u30-vvas)

SHELL_PKGS=(
    xilinx-sc-fw-u30
    xilinx-u30-gen3x4-base
    xilinx-u30-gen3x4-validate)

sw=0
force=0

parse_parameters()
{
  while [ $# -gt 0 ]
  do
    arg=$1
    case $arg in
      -sw)
      sw=1
      shift
      ;;
      -f)
      force=1
      shift
      ;;
      *)
      echo -e "\nERROR: $arg not a recognized option"
      exit 1
      ;;
    esac
  done
}

inst_if_pkg_present()
{
    FILE=$1
    if [ -f "$FILE" ]; then
        sudo apt-get install $FILE -y
        #if [ $force -eq 0 ] && [ $? ]; then
        #    echo -e "\n ERROR: problem installing $FILE package.  Exiting installation"
        #    exit
        #fi
    else
        echo -e "\n ERROR: required package $FILE not found. \n"
        exit
    fi
}

install_libsdl2-dev()
{
    SYSTEM_PRETTY_NAME=$(grep '^PRETTY' /etc/os-release | sed 's/pretty_name=//Ig')
    if [ `echo "$SYSTEM_PRETTY_NAME" | { grep -c "Ubuntu" || true; }` -le 0 ]; then
        echo "This installation script is for Ubuntu systems. Your system is $SYSTEM_PRETTY_NAME"
        echo "Aborting installation."
        exit 1
    fi
    if [ "`dpkg -l | grep -i -c libsdl2-dev`" -ge 1 ]; then
        return
    fi
    UBUNTU_REPOS=$(grep -ir archive.ubuntu.com /etc/apt/sources.list* | { grep -c archive.ubuntu.com || true; })
    CODENAME=$(grep -i "ubuntu_codename=" /etc/os-release | sed "s/ubuntu_codename=//I")
    if [ "$UBUNTU_REPOS" = 0 ]; then
        echo "Default Ubuntu repositories are not found."
        echo "Do you wish to continue the installation by adding them? (y/n)"
        read ans
        if [ "$ans" != "${ans#[Yy]}" ]; then
            echo "Adding repositories"
            echo "deb http://archive.ubuntu.com/ubuntu/ $CODENAME main restricted universe multiverse"           | sudo tee -a /etc/apt/sources.list
            echo "deb http://archive.ubuntu.com/ubuntu/ $CODENAME-updates main restricted universe multiverse"   | sudo tee -a /etc/apt/sources.list
            echo "deb http://archive.ubuntu.com/ubuntu/ $CODENAME-security main restricted universe multiverse"  | sudo tee -a /etc/apt/sources.list
            echo "deb http://archive.ubuntu.com/ubuntu/ $CODENAME-backports main restricted universe multiverse" | sudo tee -a /etc/apt/sources.list
        else
            echo "Required repositories not found in /etc/apt/sources.list."
            echo "Please consult the installation guide for required dependencies"
            echo "and ensure the system is prepared before attempting a future installation."
            echo "Aborting installation."
            exit 1
        fi
    fi
    sudo apt-get -y install libsdl2-dev && RC=$? || RC=$?
    if [ "$RC" != 0 ]; then
        echo "Unable to install necessary package for installation!"
        echo "Try running the following command then restarting installation."
        echo "echo 'deb http://archive.ubuntu.com/ubuntu/ $CODENAME main restricted universe multiverse'           | sudo tee -a /etc/apt/sources.list"
        echo "Aborting installation."
        exit 1
    fi
}

remove_package_if_installed()
{
    echo "Searching for older/existing $@"
    CNT=`dpkg -l | grep -i xilinx | grep -c $@`
    if [ $CNT -eq 0 ]
    then
        echo "$@ not found"
        return
    fi
    echo "Found instance of $@. Removing..."
    sudo apt-get purge -y $@
}

parse_parameters $@

set -e
install_libsdl2-dev
set +e

remove_installed_packages()
{
    PKGS=("$@")

    for i in "${PKGS[@]}"
    do
        remove_package_if_installed $i
    done
}

remove_installed_packages "${OLD_PKGS[@]}"
remove_installed_packages "${CURR_PKGS[@]}"
remove_installed_packages "${SHELL_PKGS[@]}"

if [ -f ./xocl.conf ]; then
    sudo cp ./xocl.conf /etc/modprobe.d/xocl.conf
else
    echo -e "\n ERROR: xocl.conf file does not exist in the directory. \n"
    exit
fi

inst_if_pkg_present ./xrt_*-xrt.deb
echo "==================================================="
echo " --- Please ignore XRT related Python or OpenCL errors ---"
echo "---------------------------------------------------"
echo "================= Installed XRT ================="

inst_if_pkg_present ./raptor_packages/xilinx-sc-fw-u30*.deb
inst_if_pkg_present ./raptor_packages/xilinx-u30-gen3x4-validate*.deb
inst_if_pkg_present ./raptor_packages/xilinx-u30-gen3x4-base*.deb
echo "================= Installed Raptor Packages ================="
inst_if_pkg_present ./xrm_*-x86_64.deb
echo "================= Installed XRM ================="
inst_if_pkg_present ./xilinx-u30-xmapropstojson*.deb
echo "================= Installed XMA props to JSON =================="
inst_if_pkg_present ./xilinx-xvbm*.deb
echo "================= Installed  XVBM ================="
inst_if_pkg_present ./xilinx-u30-xma-multiscaler*.deb
inst_if_pkg_present ./xilinx-u30-xmpsoccodecs*.deb
inst_if_pkg_present ./xilinx-u30-xlookahead*.deb
echo "================= Installed Plugins ================="
inst_if_pkg_present ./xilinx-u30-xrm-decoder*.deb
inst_if_pkg_present ./xilinx-u30-xrm-multiscaler*.deb
inst_if_pkg_present ./xilinx-u30-xrm-encoder*.deb
echo "================= Installed XRM plugins =================="
inst_if_pkg_present ./xilinx-u30-xma-apps*.deb
echo "================= Installed XMA App  ================="
inst_if_pkg_present ./xilinx-u30-xffmpeg*.deb
echo "================= Installed xFFmpeg  ================="
inst_if_pkg_present ./xilinx-u30-jobslotreservation*.deb
echo "================= Installed job Slot Reservation ================="
inst_if_pkg_present ./xilinx-u30-launcher*.deb
echo "================= Installed worker/launcher =================="
inst_if_pkg_present ./xilinx-u30-xcdr*.deb
echo "================= Installed  XCDR ================="
inst_if_pkg_present ./xilinx-u30-gstreamer*.deb
echo "================= Installed  GStreamer ================="
inst_if_pkg_present ./xilinx-u30-vvas*.deb
echo "================= Installed  VVAS ================="

install_str="\n ==== VERIFYING INSTALLATION ==== \n"
install_msg=$install_str
verify_package_is_installed()
{
    status="$(dpkg-query -W --showformat='${db:Status-Status}' "$1" 2>&1)"
    if [ ! $? = 0 ] || [ ! "$status" = installed ]; then
        install_msg+="$1 has not been installed successfully. Please install $1 manually \n"
    fi
}

verify_installed_packages()
{
    PKGS=("$@")

    for i in "${PKGS[@]}"
    do
    verify_package_is_installed $i
    done
}

verify_installed_packages "${CURR_PKGS[@]}"
verify_installed_packages "${SHELL_PKGS[@]}"

if [ ! -e /etc/modprobe.d/xocl.conf ]; then
	install_msg+="xocl.conf not found in  /etc/modprobe.d/ \n"
	install_msg+="Please copy xocl.conf found in the current directory to /etc/modprobe.d/ \n"
fi

if [ "$install_msg" = "$install_str" ]; then
	echo "++++ ++++ Post Install Verification Successful ++++ ++++"
else
	echo -e $install_msg
fi

install_lite_remove_sk_bitstream()
{
	FULL_XCLBIN=$1
	LITE_XCLBIN=$2
	DEC_JSON=$3
	ENC_JSON=$4
	EMPTY_FILE="/tmp/temp"

	# Extract Soft-kernel metadata into temporary Json files
	sudo /opt/xilinx/xrt/bin/xclbinutil --dump-section SOFT_KERNEL[kernel_vcu_decoder]-METADATA:JSON:$DEC_JSON \
  		--dump-section SOFT_KERNEL[kernel_vcu_encoder]-METADATA:JSON:$ENC_JSON --input $FULL_XCLBIN

	# Remove Bitstream & SK sections from the full xclbin (input) & generate the temporary lite xclbin (output)
  	sudo /opt/xilinx/xrt/bin/xclbinutil \
  		--remove-section BITSTREAM \
  		--remove-section SOFT_KERNEL[kernel_vcu_decoder] --remove-section SOFT_KERNEL[kernel_vcu_encoder] \
  		--input $FULL_XCLBIN --output $LITE_XCLBIN --skip-uuid-insertion

  	# Remove full xclbin & create an empty file"
  	sudo rm -f $FULL_XCLBIN
  	touch $EMPTY_FILE

	# Use Soft-kernel metadata Json file and lite xclbin and append empty soft-kernel sections for decoder & encoder
	# Output this new lite xclbin to the location of the former full xclbin
  	sudo /opt/xilinx/xrt/bin/xclbinutil \
  		--add-section SOFT_KERNEL[kernel_vcu_decoder]-OBJ:RAW:$EMPTY_FILE --add-section SOFT_KERNEL[kernel_vcu_decoder]-METADATA:JSON:$DEC_JSON \
  		--add-section SOFT_KERNEL[kernel_vcu_encoder]-OBJ:RAW:$EMPTY_FILE --add-section SOFT_KERNEL[kernel_vcu_encoder]-METADATA:JSON:$ENC_JSON \
  		--input $LITE_XCLBIN --output $FULL_XCLBIN --skip-uuid-insertion

  	sudo rm -f $LITE_XCLBIN $EMPTY_FILE $DEC_JSON $ENC_JSON
}

install_lite_remove_bitstream()
{
	FULL_XCLBIN=$1
	LITE_XCLBIN=$2

	# Remove Bitstream section from the full xclbin (input) & generate the temporary lite xclbin (output)
  	sudo /opt/xilinx/xrt/bin/xclbinutil \
  		--remove-section BITSTREAM \
  		--input $FULL_XCLBIN --output $LITE_XCLBIN --skip-uuid-insertion

  	# Remove full xclbin
  	sudo rm -f $FULL_XCLBIN
  	# Copy lite xclbin to  replace former full xclbin
  	sudo cp $LITE_XCLBIN  $FULL_XCLBIN
  	sudo rm -f $LITE_XCLBIN
}

if [ $sw -eq 1 ]
then
  sudo /opt/xilinx/xrt/bin/xclbinutil --dump-section SOFT_KERNEL[kernel_vcu_decoder]-METADATA:JSON:/tmp/dec.json --dump-section SOFT_KERNEL[kernel_vcu_encoder]-METADATA:JSON:/tmp/enc.json --input /opt/xilinx/xcdr/xclbins/transcode.xclbin
  sudo /opt/xilinx/xrt/bin/xclbinutil --remove-section BITSTREAM --remove-section SOFT_KERNEL[kernel_vcu_decoder] --remove-section SOFT_KERNEL[kernel_vcu_encoder] --input /opt/xilinx/xcdr/xclbins/transcode.xclbin --output /tmp/transcode_lite.xclbin --skip-uuid-insertion
  sudo rm -f /opt/xilinx/xcdr/xclbins/transcode.xclbin
  touch /tmp/temp
  sudo /opt/xilinx/xrt/bin/xclbinutil --add-section SOFT_KERNEL[kernel_vcu_decoder]-OBJ:RAW:/tmp/temp --add-section SOFT_KERNEL[kernel_vcu_decoder]-METADATA:JSON:/tmp/dec.json --add-section SOFT_KERNEL[kernel_vcu_encoder]-OBJ:RAW:/tmp/temp --add-section SOFT_KERNEL[kernel_vcu_encoder]-METADATA:JSON:/tmp/enc.json --input /tmp/transcode_lite.xclbin --output /opt/xilinx/xcdr/xclbins/transcode.xclbin --skip-uuid-insertion
  sudo rm -f /tmp/transcode_lite.xclbin /tmp/temp /tmp/dec.json /tmp/enc.json

  VCU_FULL_VALIDATE_XCLBIN="/opt/xilinx/firmware/u30/gen3x4/base/test/transcode.xclbin"
  VCU_LITE_VALIDATE_XCLBIN="/tmp/vcu_val_transcode_lite.xclbin"
  VCU_DEC_JSON="/tmp/vcu_val_dec.json"
  VCU_ENC_JSON="/tmp/vcu_val_enc.json"
  install_lite_remove_sk_bitstream $VCU_FULL_VALIDATE_XCLBIN $VCU_LITE_VALIDATE_XCLBIN $VCU_DEC_JSON $VCU_ENC_JSON

  # BW xclbin does not contain SK section, only remove bitstream section
  BW_FULL_VALIDATE_XCLBIN="/opt/xilinx/firmware/u30/gen3x4/base/test/bandwidth.xclbin"
  BW_LITE_VALIDATE_XCLBIN="/tmp/bw_val_transcode_lite.xclbin"
  install_lite_remove_bitstream $BW_FULL_VALIDATE_XCLBIN $BW_LITE_VALIDATE_XCLBIN

  # Validate xclbin does not contain SK section, only remove bitstream section
  VERIFY_FULL_VALIDATE_XCLBIN="/opt/xilinx/firmware/u30/gen3x4/base/test/verify.xclbin"
  VERIFY_LITE_VALIDATE_XCLBIN="/tmp/verify_val_transcode_lite.xclbin"
  install_lite_remove_bitstream $VERIFY_FULL_VALIDATE_XCLBIN $VERIFY_LITE_VALIDATE_XCLBIN

fi
